// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "github.com/pangolin-do-golang/tech-challenge-cart-api/internal/core/cart"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICartProductRepository is an autogenerated mock type for the ICartProductRepository type
type ICartProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cartID, product
func (_m *ICartProductRepository) Create(ctx context.Context, cartID uuid.UUID, product *cart.Product) error {
	ret := _m.Called(ctx, cartID, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *cart.Product) error); ok {
		r0 = rf(ctx, cartID, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByProductID provides a mock function with given fields: ctx, cartID, productID
func (_m *ICartProductRepository) DeleteByProductID(ctx context.Context, cartID uuid.UUID, productID uuid.UUID) error {
	ret := _m.Called(ctx, cartID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, cartID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCartID provides a mock function with given fields: ctx, cartID
func (_m *ICartProductRepository) GetByCartID(ctx context.Context, cartID uuid.UUID) ([]*cart.Product, error) {
	ret := _m.Called(ctx, cartID)

	var r0 []*cart.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*cart.Product, error)); ok {
		return rf(ctx, cartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*cart.Product); ok {
		r0 = rf(ctx, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cart.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductByProductID provides a mock function with given fields: ctx, cartID, productID, product
func (_m *ICartProductRepository) UpdateProductByProductID(ctx context.Context, cartID uuid.UUID, productID uuid.UUID, product *cart.Product) error {
	ret := _m.Called(ctx, cartID, productID, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *cart.Product) error); ok {
		r0 = rf(ctx, cartID, productID, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewICartProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICartProductRepository creates a new instance of ICartProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICartProductRepository(t mockConstructorTestingTNewICartProductRepository) *ICartProductRepository {
	mock := &ICartProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
