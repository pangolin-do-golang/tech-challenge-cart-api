// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	cart "github.com/pangolin-do-golang/tech-challenge-cart-api/internal/core/cart"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICartRepository is an autogenerated mock type for the ICartRepository type
type ICartRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: clientID
func (_m *ICartRepository) Create(clientID uuid.UUID) (*cart.Cart, error) {
	ret := _m.Called(clientID)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*cart.Cart, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *cart.Cart); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: clientID
func (_m *ICartRepository) Get(clientID uuid.UUID) (*cart.Cart, error) {
	ret := _m.Called(clientID)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*cart.Cart, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *cart.Cart); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICartRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICartRepository creates a new instance of ICartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICartRepository(t mockConstructorTestingTNewICartRepository) *ICartRepository {
	mock := &ICartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
